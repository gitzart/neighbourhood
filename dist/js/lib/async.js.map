{"version":3,"sources":["lib/async.js"],"names":["define","injectScript","src","s","t","document","createElement","type","async","getElementsByTagName","parentNode","insertBefore","formatUrl","name","id","paramRegex","url","replace","param","test","DEFAULT_PARAM_NAME","indexOf","uid","_uid","load","req","onLoad","config","isBuild","window","toUrl"],"mappings":";;;;;;AAMAA,OAAO,WAKH,QAASC,GAAaC,GAClB,GAAIC,GAAGC,CACPD,GAAIE,SAASC,cAAc,UAAWH,EAAEI,KAAO,kBAAmBJ,EAAEK,OAAQ,EAAML,EAAED,IAAMA,EAC1FE,EAAIC,SAASI,qBAAqB,UAAU,GAAIL,EAAEM,WAAWC,aAAaR,EAAEC,GAGhF,QAASQ,GAAUC,EAAMC,GACrB,GAAIC,GAAa,QACbC,EAAMH,EAAKI,QAAQF,EAAY,IAC/BG,EAASH,EAAWI,KAAKN,GAAQA,EAAKI,QAAQ,MAAO,IAAMG,CAE/D,QADAJ,GAAQA,EAAIK,QAAQ,KAAO,EAAI,IAAM,KACxBH,EAAO,IAAKJ,EAG7B,QAASQ,KAEL,MAAO,gBADPC,GAAQ,GACqB,KAnBjC,GAAIH,GAAqB,WACrBG,EAAO,CAqBX,QACIC,KAAO,SAASX,EAAMY,EAAKC,EAAQC,GAC/B,GAAGA,EAAOC,QACNF,EAAO,UACN,CACD,GAAIZ,GAAKQ,GAGTO,QAAOf,GAAMY,EACbzB,EAAaW,EAAUa,EAAIK,MAAMjB,GAAOC","file":"async.js","sourcesContent":["/** @license\n * RequireJS plugin for async dependency load like JSONP and Google Maps\n * Author: Miller Medeiros\n * Version: 0.1.2 (2014/02/24)\n * Released under the MIT license\n */\ndefine(function(){\n\n    var DEFAULT_PARAM_NAME = 'callback',\n        _uid = 0;\n\n    function injectScript(src){\n        var s, t;\n        s = document.createElement('script'); s.type = 'text/javascript'; s.async = true; s.src = src;\n        t = document.getElementsByTagName('script')[0]; t.parentNode.insertBefore(s,t);\n    }\n\n    function formatUrl(name, id){\n        var paramRegex = /!(.+)/,\n            url = name.replace(paramRegex, ''),\n            param = (paramRegex.test(name))? name.replace(/.+!/, '') : DEFAULT_PARAM_NAME;\n        url += (url.indexOf('?') < 0)? '?' : '&';\n        return url + param +'='+ id;\n    }\n\n    function uid() {\n        _uid += 1;\n        return '__async_req_'+ _uid +'__';\n    }\n\n    return{\n        load : function(name, req, onLoad, config){\n            if(config.isBuild){\n                onLoad(null); //avoid errors on the optimizer\n            }else{\n                var id = uid();\n                //create a global variable that stores onLoad so callback\n                //function can define new module after async load\n                window[id] = onLoad;\n                injectScript(formatUrl(req.toUrl(name), id));\n            }\n        }\n    };\n});\n"]}